<?php

namespace Andersen\SportsBettingBundle\Repository;

/**
 * GameRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GameRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param $sportId
     * @return array
     *
     * /sports/{sportId}/games
     *
     * get games of sport type
     */
    public function findAllGamesOfSportType($sportId)
    {
        $gamesFromSportId = $this
            ->getEntityManager()
            ->createQueryBuilder()
            ->select('g', 's')
            ->from('SportsBettingBundle:Game', 'g')
            ->leftJoin('g.sport', 's')
            ->where("s.id = :sportId")
            ->setParameter('sportId', $sportId);
        $query = $gamesFromSportId->getQuery()->getResult();
        return $query;
    }

    //for create coefficient
    public function FindGamesWithoutCoefficients()
    {
        $query = $this
            ->getEntityManager()
            ->createQueryBuilder()
            ->select('g', 'c')
            ->from('SportsBettingBundle:Game', 'g')
            ->leftJoin('g.coefficients', 'c')
            ->where("g.teamWinner is NULL")
            ->andWhere("c.id is NULL");
//            ->setParameter('NULL', NULL);
        $query = $query->getQuery()->getResult();
        return $query;
    }

    //for coefficient
    public function findGamesWhereTeamPlayed($teamId)
    {
        $query = $this
            ->getEntityManager()
            ->createQueryBuilder()
            ->select('t', 'g')
            ->from('SportsBettingBundle:Game', 'g')
            ->leftJoin('g.teams', 't')
            ->where("t.id = :teamId")
            ->andWhere("g.gameResult = TRUE")
            ->setParameter('teamId', $teamId);
        $query = $query->getQuery()->getResult();

        return$query;
    }

    public function findGamesWithParameters($teamId, $teamResult)
    {
        $query = $this->getEntityManager()->createQueryBuilder()
            ->select('g', 'tr', 't')
            ->from('SportsBettingBundle:Game', 'g')
            ->leftJoin('g.teamResult', 'tr')
            ->leftJoin('g.teams', 't')
            ->Where("t.id = :teamId")
            ->andWhere("tr.gameResult = :teamResult")
            ->setParameter('teamId', $teamId)
            ->setParameter('teamResult', $teamResult);
        $query = $query->getQuery()->getResult();

        return $query;
    }

    public function findGamesWithoutTime()
    {
        $query = $this->getEntityManager()->createQueryBuilder()
            ->select('g')
            ->from('SportsBettingBundle:Game', 'g')
            ->where("g.startTime IS NULL");
        $query = $query->getQuery()->getResult();

        return $query;
    }

    public function selectGamesWherePlayTeamFromOurGame($teamId)
    {
        $query = $this->getEntityManager()->createQueryBuilder()
            ->select('g', 't')
            ->from('SportsBettingBundle:Game', 'g')
            ->leftJoin('g.teams', 't')
            ->where("t.id = :teamId")
            ->andWhere("g.gameResult IS NULL")
            ->setParameter('teamId', $teamId);
        $query = $query->getQuery()->getResult();

        return $query;
    }

    /** find games with elapsed time */
    public function findGamesWithElapsedTime()
    {
        $query = $this->getEntityManager()->createQueryBuilder()
            ->select('g')
            ->from('SportsBettingBundle:Game', 'g')
            ->where("g.teamWinner IS NULL")
            ->andWhere("g.finishTime < :nowTime")
            ->setParameter('nowTime', new \DateTime('now'), \Doctrine\DBAL\Types\Type::DATETIME);
        $query = $query->getQuery()->getResult();

        return $query;
    }

    public function notCompleteGame()
    {
        $query = $this->getEntityManager()->createQueryBuilder()
            ->select('g')
            ->from('SportsBettingBundle:Game', 'g')
            ->where("g.gameResult IS NULL");
        $query = $query->getQuery()->getResult();

        return $query;
    }
}
